package main

func isValidSudoku(board [][]byte) bool {
	for i := 0; i < 9; i++ {
		mr := make(map[byte]int)
		mc := make(map[byte]int)
		for j := 0; j < 9; j++ {
			if board[i][j] != '.' {
				if mr[board[i][j]] == 1 {
					return false
				}
				mr[board[i][j]] = 1
			}
			if board[j][i] != '.' {
				if mc[board[j][i]] == 1 {
					return false
				}
				mc[board[j][i]] = 1
			}
		}
	}

	var check func(i, j int) bool
	check = func(i, j int) bool {
		m := make(map[byte]int)
		for k := i; k < i+3; k++ {
			for l := j; l < j+3; l++ {
				if board[k][l] != '.' {
					if m[board[k][l]] == 1 {
						return false
					}
					m[board[k][l]] = 1
				}
			}
		}
		return true
	}
	for i := 0; i < 3; i++ {
		for j := 0; j < 3; j++ {
			if !check(i*3, j*3) {
				return false
			}
		}
	}
	return true
}

func main() {
	sudoku := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	//sudoku := [][]byte{
	//	{'.', '.', '4', '.', '.', '.', '6', '3', '.'},
	//	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	//	{'5', '.', '.', '.', '.', '.', '.', '9', '.'},
	//	{'.', '.', '.', '5', '6', '.', '.', '.', '.'},
	//	{'4', '.', '3', '.', '.', '.', '.', '.', '1'},
	//	{'.', '.', '.', '7', '.', '.', '.', '.', '.'},
	//	{'.', '.', '.', '5', '.', '.', '.', '.', '.'},
	//	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	//	{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	//}
	print(isValidSudoku(sudoku))
}
